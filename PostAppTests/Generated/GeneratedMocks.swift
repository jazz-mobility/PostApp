///
/// @Generated by Mockolo
///



import Combine
import Foundation
import UIKit
@testable import PostApp

class AuthenticationViewInterfaceMock: AuthenticationViewInterface {
    init() { }


    private(set) var showCallCount = 0
    var showArgValues = [String]()
    var showHandler: ((String) -> ())?
    func show(error: String)  {
        showCallCount += 1
        showArgValues.append(error)
        if let showHandler = showHandler {
            showHandler(error)
        }
        
    }
}

class AuthenticationPresenterInterfaceMock: AuthenticationPresenterInterface {
    init() { }


    private(set) var didTapLoginCallCount = 0
    var didTapLoginArgValues = [String]()
    var didTapLoginHandler: ((String) -> ())?
    func didTapLogin(username: String)  {
        didTapLoginCallCount += 1
        didTapLoginArgValues.append(username)
        if let didTapLoginHandler = didTapLoginHandler {
            didTapLoginHandler(username)
        }
        
    }
}

class AuthenticationRoutingMock: AuthenticationRouting {
    init() { }


    private(set) var didFinishAuthenticationCallCount = 0
    var didFinishAuthenticationArgValues = [User]()
    var didFinishAuthenticationHandler: ((User) -> ())?
    func didFinishAuthentication(user: User)  {
        didFinishAuthenticationCallCount += 1
        didFinishAuthenticationArgValues.append(user)
        if let didFinishAuthenticationHandler = didFinishAuthenticationHandler {
            didFinishAuthenticationHandler(user)
        }
        
    }

    private(set) var authenticateUserCallCount = 0
    var authenticateUserHandler: (() -> ())?
    func authenticateUser()  {
        authenticateUserCallCount += 1
        if let authenticateUserHandler = authenticateUserHandler {
            authenticateUserHandler()
        }
        
    }
}

class AuthenticationInteractorInterfaceMock: AuthenticationInteractorInterface {
    init() { }


    private(set) var loginCallCount = 0
    var loginArgValues = [String]()
    var loginHandler: ((String) -> (AnyPublisher<User, AuthenticationError>))?
    func login(username: String) -> AnyPublisher<User, AuthenticationError> {
        loginCallCount += 1
        loginArgValues.append(username)
        if let loginHandler = loginHandler {
            return loginHandler(username)
        }
        fatalError("loginHandler returns can't have a default value thus its handler must be set")
    }
}

